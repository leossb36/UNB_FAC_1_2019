.data
	A: .word 0
	resp: .word 0

	break_line: .asciiz "\n"
    error: .asciiz "Entrada invalida.\n"

.text

main:
	# AA and BB, AA or BB, AA xor BB, AA sub BB, AA << 3,  BB >> 1
	jal read_value #leitura de entrada de teclado
	sw $v0, A #salva retorno na word AA
	
	lw $t1, A # corregando dados de AA para variavel de argumento
	jal is_greater_than # checar se AA e maior que 32768
	move $s0, $t1 # copia dados para variavel de argumento
    
    jal factory
    
    #print quebra de linha
    la $a0, break_line
	
	li $v0, 4
	syscall
	
	jr $ra

	#finalizando programa/
	li $v0, 10 # exit
	syscall

factory:
	addi $s1, $zero, 2 #vamos usar no primeiro while para fatorar pelo caso base, 2
	addi $t7, $s1, 1 #t7 = i, no caso i = 3, vamos usar no laço FOR
	while01:
		div $t1, $s1
		mfhi $t6 #se a divisão tiver resto diferente de 0, sai do laço
		bne $t6, $zero, for
	
		li $v0, 1
		move $a0, $s1
		syscall
		
		la $a0, break_line
		li $v0, 4
		syscall
		
		div $t1, $t1, 2 #dividindo o numero para nao entrar em laço infinito
		j while01
		
	for:
		#aqui tem q ter toda a condição de raiz quadrada para verificar se fica ou não no laço, caso nao fique, j exit_for
		while02:
			div $t1, $t7
			mfhi $t6 #se a divisão tiver resto diferente de 0, sai do while
			bne $t6, $zero, exit_while02
			
			li $v0, 1
			add $a0, $t7, $zero
			syscall
			
			la $a0, break_line
			li $v0, 4
			syscall
			
			div $t1, $t1, $t7
			j while02
			
		exit_while02:
			addi $t7, $t7, 2 #saindo do laço while e incrementando o for
			j for
	
	exit_for:		
		bgt $t1, 2, exit_factorial
		j $ra
		
	exit_factorial:
		li $v0, 1
		add $a0, $t1, $zero		
		syscall
		
		la $a0, break_line
		li $v0, 4
		syscall
		
		j $ra
		
read_value:
	li $v0, 5 #lendo uma valor inteiro de entrada do teclado
	syscall

	jr $ra #retorna valor inteiro

is_greater_than: #if (arg < 32768) continue
	addi $t2, $t2, 1
    slti $t3, $t1, 32768  #(arg < 32768) -> retorna true ou false
    sge $t4, $t1, $t5
    and $t2, $t3, $t4
	beq $t2, $t3, exit_prog_error #se t3 for true retorna, se false error 

	jr $ra #retorna valor checado

print_data:
	
	li $v0, 1 #Chamada de sistema para print de valor
	move $a0, $t0
	syscall


exit_prog_error:
	
	la $a0, error #printa erro

	li $v0, 4
	syscall

	li $v0, 10 # exit
	syscall
